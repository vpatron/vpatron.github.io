<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>vince.patronweb.com</title>
        <description>This is Vince's site for various projects he's tinkering with.</description>
        <link>http://justgoodthemes.com/</link>
        <atom:link href="http://justgoodthemes.com/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Thu, 17 May 2018 19:39:34 +0000</pubDate>
        <lastBuildDate>Thu, 17 May 2018 19:39:34 +0000</lastBuildDate>
        <generator>Jekyll v3.7.3</generator>
        
            <item>
                <title>Hummicam, Raspberry Pi wildlife camera</title>
                <description>&lt;p&gt;A hummingbird decided to nest in our potted olive tree so, of course, I had to scour the web to see if I could make a wildlife camera using my favorite single-board computer, the &lt;a href=&quot;https://www.adafruit.com/product/3400&quot;&gt;$10 Raspberry Pi Zero W&lt;/a&gt;. The result was fantastic!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I found &lt;a href=&quot;http://pibat.afraidofsunlight.co.uk/pi-projects&quot;&gt;this guy’s webpage&lt;/a&gt; which had a fantastic idea of mating an inexpensive clip-on telephoto lens to a Raspberry Pi camera sensor. I decided to replicate his work.&lt;/p&gt;

&lt;p&gt;The result was impressive. Ok, it’s definitly not National Geographic quality, and the photographers will whine about horrible chromatic aberration,  but it is damn awesome for a $12 lens hacked on to a $20 camera running on a $10 Linux computer with wifi in a $1.50 plastic teacup!&lt;/p&gt;

&lt;h2&gt;The Results&lt;/h2&gt;

&lt;p&gt;The results are fantastic for very low budget gear!&lt;/p&gt;

&lt;iframe src=&quot;https://www.youtube.com/embed/3Ll6AYvHUAs&quot; width=&quot;854&quot; height=&quot;480&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2&gt;The Hardware&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/product/3400&quot;&gt;Raspberry Pi Zero W&lt;/a&gt; (W has wifi)&lt;/li&gt;
  &lt;li&gt;16 GB SD card&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/product/3508&quot;&gt;Raspberry Pi 5 MP camera for Zero&lt;/a&gt; (different version than Pi 3)&lt;/li&gt;
  &lt;li&gt;Phone USB charger – a crappy 500 mA one works just fine&lt;/li&gt;
  &lt;li&gt;USB-to-micro-B cable&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shop.pimoroni.com/products/telephoto-lens&quot;&gt;Clip-on telephoto for cell phone&lt;/a&gt; from Pimoroni&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/hummingbird-nesting.jpg&quot; alt=&quot;Anna's Hummingbird&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;Anna's hummingbird nesting&lt;/figcaption&gt; 
    
&lt;/figure&gt;

&lt;p&gt;The camera is made specifically for the Pi Zero which has a smaller connector than the RPi3. The telephoto is the same one from Pimoroni the other guy used from the UK. I’m sure other brands and types will work just fine.&lt;/p&gt;

&lt;p&gt;For power, the Pi Zero W is much lower power (and slower) than the RPi3 so it is happy with a 500 mA adapter.&lt;/p&gt;

&lt;h2&gt;The Software&lt;/h2&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/hummicam-pikrellcam.png&quot; alt=&quot;PiKrellCam Web Interface&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;PiKrellCam Web Interface&lt;/figcaption&gt; 
    
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/billw2/pikrellcam&quot;&gt;PiKrellCam&lt;/a&gt; is the software I used to 
control the camera. The cool thing is that it runs a web server. All you have 
to do is http:// to the IP of your Pi Zero and you get this screen for full 
control of the camera.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/billw2/pikrellcam
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pikrellcam
./install-pikrellcam.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can shoot stills and video, adjust settings, download the files, reboot the Pi, all via the web interface.&lt;/p&gt;

&lt;p&gt;PiKrellCamm big feature is motion triggering, but I found it useless because the SW would false trigger constantly because of the wind swaying the tree.&lt;/p&gt;

&lt;p&gt;One odd observation is that the camera’s white balance seems wrong. When set to “sunlight”, “shade” or “cloudy” settings, the image is very yellow. I had to set it to “incandescent” to get more correct looking colors.&lt;/p&gt;

&lt;h2&gt;USB Serial Gadget&lt;/h2&gt;

&lt;p&gt;Once the enclosure is sealed up, getting to the SD card to change wifi settings will be impossible. That’s where the USB Serial Gadget mode comes in.&lt;/p&gt;

&lt;p&gt;The Raspberry Pi Zero (and the Zero W) support special USB OTG modes which the RPi3 does not. Your Zero can be a USB serial device through which you can get to the console and files without using a special UART cable.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.tal.org/tutorials/raspberry-pi-zero-usb-serial-console&quot;&gt;best instructions I found here&lt;/a&gt; show you how to configure everything via the files on the SD card. There’s no need to ever attach a keyboard and monitor.&lt;/p&gt;

&lt;p&gt;Here’s the gist: you have the OS load the USB driver called dwc2 at boot, enable it, and connect the console to this USB driver.&lt;/p&gt;

&lt;p&gt;In /boot/config.txt add this line towards the end:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dtoverlay=dwc2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In /boot/cmdline.txt add “modules-load=dwc2,g_serial” just after “rootwait”. This will all be in one long line.&lt;/p&gt;

&lt;p&gt;cd to /etc/systemd/system/getty.target.wants directory and create this symlink to redirect the console to ttyGS0.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s /lib/systemd/system/getty@.service getty@ttyGS0.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;The Build&lt;/h3&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/hummicam-back-open.jpg&quot; alt=&quot;Hummicam, Open Back&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;Hummicam, open back&lt;/figcaption&gt; 
    
&lt;/figure&gt;

&lt;p&gt;I found a square plastic tea cup for $1.50 at a local discount shop and put that to service.&lt;/p&gt;

&lt;p&gt;The lens has a threaded base. I drilled a very large hole with a step drill bit, being careful to drill it just a tiny bit smaller than the lens threads. After some careful twisting I got the lens to thread into the hole without having to tap threads.&lt;/p&gt;

&lt;p&gt;Mounting the camera sensor was the hardest part. I did not get good pictures of it but basically the camera has to be about 10 cm from the base of the lens. I mounted the camera(which comes with a sticky back side) on a rectangular aluminum plate and put a stack of 8 double-sided foam tape (the thick kind) to get it at the right distance from the lens. Finding the optical center took a lot of trial and error. I’ll fabricate something better for the next build or find someone to 3D print something for me.&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/hummicam-pikrellcam.png&quot; alt=&quot;Completed Hummingbird Camera&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;Completed hummingbird camera&lt;/figcaption&gt; 
    
&lt;/figure&gt;

&lt;p&gt;I drilled and tapped a standard 1/4”-20 threaded hole into the bottom to attach the box to a camera tripod. The USB cable is just hot-glued to the corner of the case.&lt;/p&gt;

&lt;p&gt;The back is completely open so I just took a lot of camouflage duct tape and completely covered the box to help seal it from water since this will sit outdoors continuously operating for a month or more.&lt;/p&gt;

&lt;h2&gt;Outdoor Placement&lt;/h2&gt;

&lt;p&gt;Anna’s Hummingbirds are very well adjusted to city life and are thus not spooked by weird man-made contraptions like my lousy camera setup. For more skittish birds and animals, more effective camouflage will probably be in order.&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/hummicam-tree.jpg&quot; alt=&quot;Hummicam aimed at nest&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;Hummicam aimed at hummingbird nest&lt;/figcaption&gt; 
    
&lt;/figure&gt;

</description>
                <pubDate>Sun, 18 Feb 2018 00:00:00 +0000</pubDate>
                <link>http://justgoodthemes.com/2018/02/18/Hummicam-Raspberry-Pi-wildlife-camera/</link>
                <guid isPermaLink="true">http://justgoodthemes.com/2018/02/18/Hummicam-Raspberry-Pi-wildlife-camera/</guid>
                
                <category>raspberry pi</category>
                
                <category>photography</category>
                
                <category>nature</category>
                
                
            </item>
        
            <item>
                <title>Driving a nixie module with a Raspberry Pi</title>
                <description>&lt;p&gt;A friend was poking around with these QS30-1 nixie modules from nixieclock.org. He mentioned that all the projects on the ‘net used an Arduino but he really wanted to use a Raspberry Pi.&lt;/p&gt;

&lt;p&gt;I looked at the Arduino code and Nixie board schematics and wrote a Python driver for it.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;Why a Raspberry Pi?&lt;/h2&gt;

&lt;p&gt;Because a Pi is way more powerful: it is a computer running the Linux with wifi. This makes it controllable over a network or the internet with all the features and power of a full operating system. And a Raspberry Pi Zero W can be as cheap as an Arduino.&lt;/p&gt;

&lt;h2&gt;Nixie module&lt;/h2&gt;

&lt;p&gt;This Python module was written using the QS30-1 from &lt;a href=&quot;http://www.nixieclock.org/?p=566&quot;&gt;nixieclock.org&lt;/a&gt; as a reference. This module is stackable for multipe digits and has an RGB LED backlight.&lt;/p&gt;

&lt;figure class=&quot;caption&quot;&gt;
    &lt;img src=&quot;/images/posts/pi-nixie-qs30.jpg&quot; alt=&quot;QC30-1 Nixie module&quot; /&gt;
    
    &lt;figcaption class=&quot;caption-text&quot;&gt;QC30-1 Nixie module&lt;/figcaption&gt; 
    
&lt;/figure&gt;

&lt;p&gt;I took a look at the schematic and found that it uses the old 74HC595 shift register to drive 16 outputs for each module. 10 outputs drive the nixie digits, 2 for the neon colon dots, and 3 for the RGB led which backlights each module.&lt;/p&gt;

&lt;p&gt;The nifty thing is that these modules daisy chain so you can stack as many digits as you want together.&lt;/p&gt;

&lt;h2&gt;Github&lt;/h2&gt;

&lt;p&gt;I posted the driver to &lt;a href=&quot;https://github.com/vpatron0/pi_nixie&quot;&gt;Github&lt;/a&gt; as open source software.&lt;/p&gt;

&lt;h2&gt;How to use&lt;/h2&gt;

&lt;p&gt;I made it simple to use by embedding the backlight LED color and colon information as part of the text string you give it. A few examples will make it clear:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sending “b12:34” will display “12:34” with a blue backlight&lt;/li&gt;
  &lt;li&gt;Sending “r1.2 g3.4” will display “1.2” in red, followed by a space, and then “3.4” in green.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Wiring&lt;/h2&gt;

&lt;p&gt;These modules require 4 pins for data transfer. The GPIO are “bit-banged” in software. Because no hardware resources are used (other than basic GPIO output function), any available GPIO on the Raspberry Pi can be used.&lt;/p&gt;

&lt;p&gt;The line in the example below defines which GPIO pin is used for what function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nixie = pi_nixie.PiNixie(pinDATA=25, pinSHCP=23, pinSTCP=24, pinOE=18)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;pinDATA – serial data for 74HC595&lt;/li&gt;
  &lt;li&gt;pinSHCP – 74HC595 shifts serial data on rising edge&lt;/li&gt;
  &lt;li&gt;pinSTCP – 74HC595 stores data on rising edge&lt;/li&gt;
  &lt;li&gt;pinOE – high turns on display and backlight, off turns off display and backlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that pinOE is also used for adjusting the brightness of the digits and the backlight LEDs by PWM of the pinOE signal.&lt;/p&gt;

&lt;p&gt;The numbers correspond to the GPIO number and not the actual pin number of the header connector. See the documentation for RPi.GPIO for details.&lt;/p&gt;

&lt;h2&gt;Voltage Level Translator&lt;/h2&gt;

&lt;p&gt;The Raspberry Pi uses 3.3V logic, but the “Arduino compatible” Nixie modules use a 74HC595 shift register IC that is powered at 5V and, technically, should be driven with 5 Volt logic. 3.3 Volts does not meet the 74HC595 datasheet minimum for a logic “1” (Vih). However, in tested HW, it works fine.&lt;/p&gt;

&lt;p&gt;If you want to meet all technical requirements for a very robust design, you can use a 3.3V to 5V level shifter such as a 74HC125.&lt;/p&gt;

&lt;p&gt;I’ll try to help these Nixie and VFD (vacuum flourescent display) kit vendors make more products for the Raspberry Pi.&lt;/p&gt;

</description>
                <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
                <link>http://justgoodthemes.com/2018/02/01/raspberry-pi-nixie/</link>
                <guid isPermaLink="true">http://justgoodthemes.com/2018/02/01/raspberry-pi-nixie/</guid>
                
                <category>nixie</category>
                
                <category>raspberry pi</category>
                
                <category>python</category>
                
                
            </item>
        
    </channel>
</rss>